generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * Booth -> ブース
 * CSV: 'マスタ情報  ブース'
 * This model stores information about physical booths or rooms used for classes.
 * Maps the ブースID, ブース名, and status fields from the CSV.
 */
model Booth {
  boothId               String                 @id @default(cuid()) @map("booth_id")
  name                  String                 @db.VarChar(100)
  status                Boolean?               @default(true)
  notes                 String?                @db.VarChar(255)
  classSessions         ClassSession[]
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("booths")
}

/**
 * Class -> 個別授業スケジュール (特別授業)
 * CSV: '個別授業スケジュール 特別授業'
 * This model represents individual class sessions, particularly special classes.
 * It captures date, time, teacher, subject, and booth information for each class.
 */
model ClassSession {
  classId                 String                   @id @default(cuid()) @map("class_id")
  date                    DateTime                 @db.Date
  startTime               DateTime                 @map("start_time") @db.Time(6)
  endTime                 DateTime                 @map("end_time") @db.Time(6)
  duration                DateTime?                @map("duration") @db.Time(6)
  teacherId               String                   @map("teacher_id") @db.VarChar(50)
  studentId               String                   @map("student_id") @db.VarChar(50)
  subjectId               String                   @map("subject_id") @db.VarChar(50)
  boothId                 String                   @map("booth_id") @db.VarChar(50)
  classTypeId             String                   @map("class_type_id") @db.VarChar(50)
  notes                   String?                  @db.VarChar(255)
  booth                   Booth                    @relation(fields: [boothId], references: [boothId], onDelete: Restrict, onUpdate: Cascade)
  classType               ClassType                @relation(fields: [classTypeId], references: [classTypeId], onDelete: Restrict, onUpdate: Cascade)
  subject                 Subject                  @relation(fields: [subjectId], references: [subjectId], onDelete: Restrict, onUpdate: Cascade)
  teacher                 Teacher                  @relation(fields: [teacherId], references: [teacherId], onDelete: Restrict, onUpdate: Cascade)
  student                 Student                  @relation(fields: [studentId], references: [studentId], onDelete: Restrict, onUpdate: Cascade)
  studentClassEnrollments StudentClassEnrollment[]
  createdAt               DateTime                 @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([date])
  @@index([teacherId])
  @@unique([teacherId, date, startTime, endTime])
  @@map("class_sessions")
}

/**
 * ClassType -> 授業タイプ
 * CSV: 'マスタ情報  授業タイプ'
 * This model defines different types of classes offered by the school.
 * Used for categorizing class sessions and student preferences.
 */
model ClassType {
  classTypeId               String                   @id @default(cuid()) @map("class_type_id")
  name                      String                   @db.VarChar(100)
  notes                     String?                  @db.VarChar(255)
  classSessions             ClassSession[]
  createdAt                 DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("class_types")
}

model Student {
  studentId                  String                      @id @default(cuid()) @map("student_id")
  userId                     String                      @unique @map("user_id")
  name                       String                      @db.VarChar(100)
  kanaName                   String?                     @map("kana_name") @db.VarChar(100)
  studentTypeId              String?                     @map("student_type_id") @db.VarChar(50)
  gradeYear                  Int?                        @map("grade_year")
  lineId                     String?                     @map("line_id") @db.VarChar(50)
  notes                      String?                     @db.VarChar(255)
  studentClassEnrollments    StudentClassEnrollment[]
  ClassSession               ClassSession[]
  studentType                StudentType?                @relation(fields: [studentTypeId], references: [studentTypeId], onDelete: SetNull, onUpdate: Cascade)
  user                       User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                  DateTime                    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                  DateTime                    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([studentTypeId])
  @@map("students")
}

/**
 * StudentType -> 学生タイプ
 * CSV: 'マスタ情報  学生タイプ'
 * This model defines categories of students, such as elementary, middle, or high school.
 * Used to group students and relates to the Grade model.
 */
model StudentType {
  studentTypeId String   @id @default(cuid()) @map("student_type_id")
  name          String   @db.VarChar(100)
  maxYears      Int?     @map("max_years") // 最大学年数（例: 小学生=6, 中学生=3 など）
  description   String?  @db.VarChar(255)
  Student       Student[]
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("student_types")
}

/**
 * StudentClassEnrollment
 * This model tracks which students are enrolled in which class sessions.
 * It's a junction table connecting students to class sessions with additional metadata.
 * No direct corresponding CSV, but relates to both student and class session data.
 */
model StudentClassEnrollment {
  enrollmentId String       @id @default(cuid()) @map("enrollment_id")
  classId      String       @map("class_id") @db.VarChar(50)
  studentId    String       @map("student_id") @db.VarChar(50)
  status       String?      @db.VarChar(50)
  notes        String?      @db.VarChar(255)
  classSession ClassSession @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)
  student      Student      @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@unique([classId, studentId])
  @@map("student_class_enrollments")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

/**
 * Teacher -> 講師
 * CSV: 'マスタ情報  講師'
 * This model stores comprehensive teacher information including personal details,
 * educational background, contact information, and certification data.
 * Central to class scheduling and assignment.
 */
model Teacher {
  teacherId                String                     @id @default(cuid()) @map("teacher_id")
  userId                   String                     @unique @map("user_id")
  name                     String                     @db.VarChar(100)
  kanaName                 String?                    @map("kana_name") @db.VarChar(100)
  email                    String?                    @db.VarChar(100)
  lineId                   String?                    @map("line_id") @db.VarChar(50)
  notes                    String?                    @db.VarChar(255)
  classSessions            ClassSession[]
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("teachers")
}

/**
 * Subject -> 科目
 * CSV: 'マスタ情報  科目'
 * This model defines the academic subjects taught at the school.
 * Core entity related to classes, preferences, and teacher assignments.
 */
model Subject {
  subjectId                String                     @id @default(cuid()) @map("subject_id")
  name                     String                     @db.VarChar(100)
  notes                    String?                    @db.VarChar(255)
  classSessions            ClassSession[]
  createdAt                DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("subjects")
}

/**
 * Notification -> 通知
 * This model stores notification records for system communications.
 * Handles message delivery to students and teachers.
 * No direct corresponding CSV file.
 */
model Notification {
  notificationId   String    @id @default(cuid()) @map("notification_id")
  recipientType    String?   @map("recipient_type") @db.VarChar(20)
  recipientId      String?   @map("recipient_id") @db.VarChar(50)
  notificationType String?   @map("notification_type") @db.VarChar(50)
  message          String?   @db.VarChar(255)
  relatedClassId   String?   @map("related_class_id") @db.VarChar(50)
  sentVia          String?   @map("sent_via") @db.VarChar(20)
  sentAt           DateTime? @map("sent_at") @db.Timestamp(6)
  readAt           DateTime? @map("read_at") @db.Timestamp(6)
  status           String?   @db.VarChar(20)
  notes            String?   @db.VarChar(255)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("notifications")
}

/**
 * Event -> 定休日
 * CSV: 'マスタ情報  定休日'
 * This model stores holidays, vacations, and other non-class days.
 * Used for scheduling and availability calculations.
 */
model Event {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  startDate   DateTime
  endDate     DateTime
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("events")
}

/**
 * User -> Authentication and authorization
 * This model handles user authentication and access control.
 * Links to both Student and Teacher models for role-based access.
 * No direct corresponding CSV file.
 */
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  STAFF
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  username     String?  @unique
  passwordHash String?
  role         UserRole @default(ADMIN)
  student      Student?
  teacher      Teacher?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("users")
}

/**
 * Account
 * Authentication-related model for external provider connections.
 * Part of the authentication system, no direct corresponding CSV.
 */
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/**
 * Session
 * Authentication session management model.
 * Part of the authentication system, no direct corresponding CSV.
 */
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/**
 * VerificationToken
 * Email verification token model for authentication.
 * Part of the authentication system, no direct corresponding CSV.
 */
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
